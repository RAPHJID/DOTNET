@* @page "/artrazor"
@inject HttpClient Http
@inject IJSRuntime _jsRuntime


<div class="row">
    @foreach (var arth in arts)
    {
        <AdminSingleArt art="arth"></AdminSingleArt>
    }
</div>

<br />
<br />


@code {


    public List<Art> arts = new List<Art>();

    public bool IsConfirmed { get; set; }

    protected override async Task OnInitializedAsync()
    {

        //call api to get the arts to display

        var pic = await Http.GetFromJsonAsync<List<Art>>("sample-data/art.json");
        if (pic.Any())
        {
            arts = pic;
        }

    }

  
} *@
@page "/artrazor"
@inject HttpClient Http
@inject IJSRuntime _jsRuntime

<div class="row">
    @foreach (var arth in arts)
    {
        <AdminSingleArt art="arth" OnEditArt="HandleEdit" OnDeleteArt="ShowDeleteConfirmation"></AdminSingleArt>
    }
</div>

<br />
<br />

<!-- Include your confirmation modal here -->
<!-- For simplicity, let's just provide buttons for confirmation and cancellation -->
<div class="modal" style="display: @(artToDelete != null ? "block" : "none")">
    <div class="modal-content">
        <p>Are you sure you want to delete @artToDelete?.Name?</p>
        <button class="confirm" @onclick="ConfirmDelete">Confirm</button>
        <button class="cancel" @onclick="CancelDelete">Cancel</button>
    </div>
</div>
<!-- Pagination -->
<div class="pagination">
    <button @onclick="GoToPreviousPage" disabled="@IsFirstPage">Previous</button>
    <button @onclick="GoToNextPage" disabled="@IsLastPage">Next</button>
</div>

@code {
    public List<Art> arts = new List<Art>();
    public bool IsConfirmed { get; set; }
    public Art artToDelete; // To store the art being deleted
    public List<Art> DisplayedArts = new List<Art>();
    public int PageSize = 4; // Number of arts to display per page
    public int CurrentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        // Call API to get the arts to display
        var pic = await Http.GetFromJsonAsync<List<Art>>("sample-data/art.json");
        if (pic.Any())
        {
            arts = pic;
            UpdateDisplayedArts();
        }
    }


    private void UpdateDisplayedArts()
    {
        var startIndex = (CurrentPage - 1) * PageSize;
        DisplayedArts = arts.Skip(startIndex).Take(PageSize).ToList();
        StateHasChanged();
    }

    private void GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            UpdateDisplayedArts();
        }
    }

    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            UpdateDisplayedArts();
        }
    }

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage * PageSize >= arts.Count;

    private async Task HandleEdit(Art art)
    {
        // Implement the logic for editing the art
        // This is where you should open a modal or navigate to an edit page
        // For simplicity, let's just display a confirmation for now
        Console.WriteLine($"Editing art: {art.Name}");
    }

    private void ShowDeleteConfirmation(Art art)
    {
        // Show a confirmation modal before deleting
        artToDelete = art;
        // You can set up your modal visibility logic here
        // For simplicity, let's just display a console message
        Console.WriteLine($"Confirm deletion of art: {artToDelete.Name}");
    }

    private async Task ConfirmDelete()
    {
        // Implement the logic for deleting the art
        // You might want to show a confirmation dialog before deleting
        Console.WriteLine($"Deleting art: {artToDelete.Name}");
        // Implement your actual delete logic here
        arts.Remove(artToDelete); // Remove the art from the list
        artToDelete = null; // Reset the art to delete
    }

    private void CancelDelete()
    {
        // Implement any logic needed when the delete action is canceled
        Console.WriteLine("Delete action canceled");
        artToDelete = null; // Reset the art to delete
    }
}
