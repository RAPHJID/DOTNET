@page "/login"
@inject IAuth authInterface
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navigationManager


<div class="container-fluid bg-dark text-light vh-100">
    <div class="row h-100">
        <div class="col-md-6 d-flex align-items-center justify-content-center">
            <img class="h-75 w-75" src="https://i.pinimg.com/236x/0f/88/86/0f8886875cc8e90e48b9bde0bc8063f4.jpg" />
        </div>

        <div class="col-md-6 d-flex align-items-center justify-content-center">
            <div style="max-width: 400px; width: 100%;">
                <h1 class="text-center">Login User</h1>
                <EditForm Model="@user" OnValidSubmit="loginUser">
                    <DataAnnotationsValidator />

                    <div class="form-group p-2">
                        <label for="name" class="text-light">UserName</label>
                        <InputText type="email" class="form-control p-2 bg-dark text-light" id="email" @bind-Value="@user.Username" aria-describedby="name" />
                        <ValidationMessage For="@(()=>user.Username)" />
                    </div>

                    <div class="form-group p-2">
                        <label for="password" class="text-light">Password</label>
                        <InputText type="text" class="form-control p-2 bg-dark text-light" id="password" @bind-Value="@user.Password" aria-describedby="name" />
                        <ValidationMessage For="@(()=>user.Password)" />
                    </div>

                    <div class="d-flex justify-content-center">
                        <button type="submit" style="width:150px" class="p-2 btn btn-primary">Submit</button>
                    </div>

                    <div class="row mt-3">
                        <p class="col-12 text-light text-center">Not a member? <a href="register">Register</a></p>
                    </div>
                </EditForm>
               @*  Showing the error message *@
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <div class="alert alert-danger mt-2">
                        @errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private LoginRequestDto user = new LoginRequestDto();
    private string errorMessage;

    private async Task loginUser()
    {
        try
        {
            var res = await authInterface.Login(user);

            if (!string.IsNullOrWhiteSpace(res.Token))
            {
               
                await localStorage.SetItemAsStringAsync("authToken", res.Token);
                await authProvider.GetAuthenticationStateAsync();
                navigationManager.NavigateTo("/user");
            }
            else
            {
                errorMessage = "Invalid credentials. Please check your username and password.";
            }
        }
        catch (Exception ex)
        {
         
            errorMessage = ex.Message;
        }
    }
}
