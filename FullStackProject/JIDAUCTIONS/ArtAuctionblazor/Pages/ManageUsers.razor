@page "/manageusers"
<div class="main">
<div class="container mt-5 bg-dark p-4">
    <h3 class="text-dark mb-4">Manage Users</h3>

    @if (users.Any())
    {
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th scope="col">Username</th>
                    <th scope="col">No. of Bids</th>
                    <th scope="col">User Type</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.Username</td>
                        <td>@user.NoOfBids</td>
                        <td>@GetUserType(user)</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditUser(user)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-danger" @onclick="() => DeleteUser(user)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-muted">No users available.</p>
    }
</div>

<!-- EditUserModal component -->
<EditUserModal @ref="editUserModal" EditUserAction="EditUser" />

@code {
    List<User> users;
    EditUserModal editUserModal;

    // Assume you have a method to fetch users
    protected override void OnInitialized()
    {
        // Fetch users from your data source
        users = FetchUsers();
    }

    void DeleteUser(User user)
    {
        // Add logic to delete user
        // Example: userService.DeleteUser(user);

        // Refresh the user list after deletion
        users.Remove(user);
    }

    void EditUser(User user)
    {
        // Pass the user to the edit modal
        editUserModal.EditUser(user);
    }

    List<User> FetchUsers()
    {
        // Replace this with actual logic to fetch users
        return new List<User>
        {
            new User { Username = "User1", IsBidder = true, IsSeller = false, NoOfBids = 5 },
            new User { Username = "User2", IsBidder = false, IsSeller = true, NoOfBids = 13},
            new User { Username = "User3", IsBidder = true, IsSeller = false, NoOfBids = 7 },
            new User { Username = "User4", IsBidder = false, IsSeller = true, NoOfBids = 2 },
            new User { Username = "User5", IsBidder = true, IsSeller = false, NoOfBids = 9 },
            new User { Username = "User6", IsBidder = false, IsSeller = true, NoOfBids = 1 },
        };
    }

    string GetUserType(User user)
    {
        if (user.IsBidder && user.IsSeller)
        {
            return "Bidder, Seller";
        }
        else if (user.IsBidder)
        {
            return "Bidder";
        }
        else if (user.IsSeller)
        {
            return "Seller";
        }
        else
        {
            return "N/A";
        }
    }
}
</div>